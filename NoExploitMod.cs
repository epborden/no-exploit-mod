using BepInEx;
using BepInEx.Logging;
using HarmonyLib;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace NoExploitMod {
    [BepInPlugin(PLUGIN_GUID, PLUGIN_NAME, PLUGIN_VERSION)]
    [BepInProcess("valheim.exe")]
    [HarmonyPatch]
    public class NoExploitMod : BaseUnityPlugin {
        private const string PLUGIN_GUID = "com.evanborden.noexploitmod";
        private const string PLUGIN_NAME = "No Exploit Mod";
        private const string PLUGIN_VERSION = "1.0.2";

        private readonly Harmony harmony = new Harmony(PLUGIN_GUID);

        private ManualLogSource logger = BepInEx.Logging.Logger.CreateLogSource("NoExploitMod");

        private void Awake() {
            logger.LogInfo("Patching common Valheim advancement exploits :).");
            harmony.PatchAll();
        }

        [HarmonyPatch(typeof(Aoe), nameof(Aoe.Setup))]
        [HarmonyPostfix]
        private static void AoeSetupPatch(ref HitData.DamageTypes ___m_damage, Character owner) {
            if (owner.m_name == "$enemy_troll") {
                ___m_damage.m_pickaxe = 0f;
            }
        }

        [HarmonyPatch(typeof(ItemDrop), "Awake")]
        [HarmonyPostfix]
        private static void ItemDropAwakePatch(ref Rigidbody ___m_body, ref List<ItemDrop> ___m_instances) {
            string[] candidates = {
                "troll_groundslam",
                "troll_groundslam(Clone)",
                "troll_punch",
                "troll_punch(Clone)",
                "troll_throw",
                "troll_throw(Clone)"
            };

            if (candidates.Contains(___m_body.gameObject.name)) {
                foreach (ItemDrop instance in ___m_instances) {
                    instance.m_itemData.m_shared.m_damages.m_pickaxe = 0f;
                }
            }
        }

        [HarmonyPatch(typeof(MineRock5), "DamageArea")]
        [HarmonyPrefix]
        private static bool MineRock5DamageAreaPatch(ref bool __result, ref int ___m_minToolTier, HitData hit) {
            Character attacker = hit.GetAttacker();

            if (attacker != null && 
                attacker.m_name == "Human" && 
                hit.m_damage.m_blunt > 0f && 
                hit.m_toolTier < ___m_minToolTier) {
                __result = false;
                return false;
            }

            return true;
        }

        [HarmonyPatch(typeof(Location), "Awake")]
        [HarmonyPostfix]
        private static void LocationAwakePatch(ref List<Location> ___m_allLocations) {
            foreach (Location allLocation in ___m_allLocations) {
                string[] candidates = {
                    "SunkenCrypt4",
                    "SunkenCrypt4(Clone)"
                };

                if (candidates.Contains(allLocation.gameObject.name)) {
                    allLocation.m_noBuild = true;
                }
            }
        }
    }
}
